
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model adocoes
 * 
 */
export type adocoes = $Result.DefaultSelection<Prisma.$adocoesPayload>
/**
 * Model adotantes
 * 
 */
export type adotantes = $Result.DefaultSelection<Prisma.$adotantesPayload>
/**
 * Model pets
 * 
 */
export type pets = $Result.DefaultSelection<Prisma.$petsPayload>
/**
 * Model usuarios
 * 
 */
export type usuarios = $Result.DefaultSelection<Prisma.$usuariosPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const estado: {
  adotado: 'adotado',
  disponivel: 'disponivel'
};

export type estado = (typeof estado)[keyof typeof estado]


export const tamanho: {
  pequeno: 'pequeno',
  medio: 'medio',
  grande: 'grande'
};

export type tamanho = (typeof tamanho)[keyof typeof tamanho]

}

export type estado = $Enums.estado

export const estado: typeof $Enums.estado

export type tamanho = $Enums.tamanho

export const tamanho: typeof $Enums.tamanho

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Adocoes
 * const adocoes = await prisma.adocoes.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Adocoes
   * const adocoes = await prisma.adocoes.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.adocoes`: Exposes CRUD operations for the **adocoes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Adocoes
    * const adocoes = await prisma.adocoes.findMany()
    * ```
    */
  get adocoes(): Prisma.adocoesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adotantes`: Exposes CRUD operations for the **adotantes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Adotantes
    * const adotantes = await prisma.adotantes.findMany()
    * ```
    */
  get adotantes(): Prisma.adotantesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pets`: Exposes CRUD operations for the **pets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pets
    * const pets = await prisma.pets.findMany()
    * ```
    */
  get pets(): Prisma.petsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usuarios`: Exposes CRUD operations for the **usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.usuariosDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    adocoes: 'adocoes',
    adotantes: 'adotantes',
    pets: 'pets',
    usuarios: 'usuarios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "adocoes" | "adotantes" | "pets" | "usuarios"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      adocoes: {
        payload: Prisma.$adocoesPayload<ExtArgs>
        fields: Prisma.adocoesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.adocoesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adocoesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.adocoesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adocoesPayload>
          }
          findFirst: {
            args: Prisma.adocoesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adocoesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.adocoesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adocoesPayload>
          }
          findMany: {
            args: Prisma.adocoesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adocoesPayload>[]
          }
          create: {
            args: Prisma.adocoesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adocoesPayload>
          }
          createMany: {
            args: Prisma.adocoesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.adocoesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adocoesPayload>[]
          }
          delete: {
            args: Prisma.adocoesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adocoesPayload>
          }
          update: {
            args: Prisma.adocoesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adocoesPayload>
          }
          deleteMany: {
            args: Prisma.adocoesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.adocoesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.adocoesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adocoesPayload>[]
          }
          upsert: {
            args: Prisma.adocoesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adocoesPayload>
          }
          aggregate: {
            args: Prisma.AdocoesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdocoes>
          }
          groupBy: {
            args: Prisma.adocoesGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdocoesGroupByOutputType>[]
          }
          count: {
            args: Prisma.adocoesCountArgs<ExtArgs>
            result: $Utils.Optional<AdocoesCountAggregateOutputType> | number
          }
        }
      }
      adotantes: {
        payload: Prisma.$adotantesPayload<ExtArgs>
        fields: Prisma.adotantesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.adotantesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adotantesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.adotantesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adotantesPayload>
          }
          findFirst: {
            args: Prisma.adotantesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adotantesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.adotantesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adotantesPayload>
          }
          findMany: {
            args: Prisma.adotantesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adotantesPayload>[]
          }
          create: {
            args: Prisma.adotantesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adotantesPayload>
          }
          createMany: {
            args: Prisma.adotantesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.adotantesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adotantesPayload>[]
          }
          delete: {
            args: Prisma.adotantesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adotantesPayload>
          }
          update: {
            args: Prisma.adotantesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adotantesPayload>
          }
          deleteMany: {
            args: Prisma.adotantesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.adotantesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.adotantesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adotantesPayload>[]
          }
          upsert: {
            args: Prisma.adotantesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adotantesPayload>
          }
          aggregate: {
            args: Prisma.AdotantesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdotantes>
          }
          groupBy: {
            args: Prisma.adotantesGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdotantesGroupByOutputType>[]
          }
          count: {
            args: Prisma.adotantesCountArgs<ExtArgs>
            result: $Utils.Optional<AdotantesCountAggregateOutputType> | number
          }
        }
      }
      pets: {
        payload: Prisma.$petsPayload<ExtArgs>
        fields: Prisma.petsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.petsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$petsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.petsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$petsPayload>
          }
          findFirst: {
            args: Prisma.petsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$petsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.petsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$petsPayload>
          }
          findMany: {
            args: Prisma.petsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$petsPayload>[]
          }
          create: {
            args: Prisma.petsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$petsPayload>
          }
          createMany: {
            args: Prisma.petsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.petsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$petsPayload>[]
          }
          delete: {
            args: Prisma.petsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$petsPayload>
          }
          update: {
            args: Prisma.petsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$petsPayload>
          }
          deleteMany: {
            args: Prisma.petsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.petsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.petsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$petsPayload>[]
          }
          upsert: {
            args: Prisma.petsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$petsPayload>
          }
          aggregate: {
            args: Prisma.PetsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePets>
          }
          groupBy: {
            args: Prisma.petsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PetsGroupByOutputType>[]
          }
          count: {
            args: Prisma.petsCountArgs<ExtArgs>
            result: $Utils.Optional<PetsCountAggregateOutputType> | number
          }
        }
      }
      usuarios: {
        payload: Prisma.$usuariosPayload<ExtArgs>
        fields: Prisma.usuariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuariosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuariosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findFirst: {
            args: Prisma.usuariosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuariosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findMany: {
            args: Prisma.usuariosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          create: {
            args: Prisma.usuariosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          createMany: {
            args: Prisma.usuariosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usuariosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          delete: {
            args: Prisma.usuariosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          update: {
            args: Prisma.usuariosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          deleteMany: {
            args: Prisma.usuariosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usuariosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usuariosUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          upsert: {
            args: Prisma.usuariosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          aggregate: {
            args: Prisma.UsuariosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuarios>
          }
          groupBy: {
            args: Prisma.usuariosGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuariosCountArgs<ExtArgs>
            result: $Utils.Optional<UsuariosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    adocoes?: adocoesOmit
    adotantes?: adotantesOmit
    pets?: petsOmit
    usuarios?: usuariosOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AdotantesCountOutputType
   */

  export type AdotantesCountOutputType = {
    adocoes: number
  }

  export type AdotantesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adocoes?: boolean | AdotantesCountOutputTypeCountAdocoesArgs
  }

  // Custom InputTypes
  /**
   * AdotantesCountOutputType without action
   */
  export type AdotantesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdotantesCountOutputType
     */
    select?: AdotantesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdotantesCountOutputType without action
   */
  export type AdotantesCountOutputTypeCountAdocoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: adocoesWhereInput
  }


  /**
   * Count Type PetsCountOutputType
   */

  export type PetsCountOutputType = {
    adocoes: number
  }

  export type PetsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adocoes?: boolean | PetsCountOutputTypeCountAdocoesArgs
  }

  // Custom InputTypes
  /**
   * PetsCountOutputType without action
   */
  export type PetsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetsCountOutputType
     */
    select?: PetsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PetsCountOutputType without action
   */
  export type PetsCountOutputTypeCountAdocoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: adocoesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model adocoes
   */

  export type AggregateAdocoes = {
    _count: AdocoesCountAggregateOutputType | null
    _avg: AdocoesAvgAggregateOutputType | null
    _sum: AdocoesSumAggregateOutputType | null
    _min: AdocoesMinAggregateOutputType | null
    _max: AdocoesMaxAggregateOutputType | null
  }

  export type AdocoesAvgAggregateOutputType = {
    id: number | null
    pets_id: number | null
    adotantes_id: number | null
  }

  export type AdocoesSumAggregateOutputType = {
    id: number | null
    pets_id: number | null
    adotantes_id: number | null
  }

  export type AdocoesMinAggregateOutputType = {
    id: number | null
    pets_id: number | null
    adotantes_id: number | null
    data_adocao: Date | null
  }

  export type AdocoesMaxAggregateOutputType = {
    id: number | null
    pets_id: number | null
    adotantes_id: number | null
    data_adocao: Date | null
  }

  export type AdocoesCountAggregateOutputType = {
    id: number
    pets_id: number
    adotantes_id: number
    data_adocao: number
    _all: number
  }


  export type AdocoesAvgAggregateInputType = {
    id?: true
    pets_id?: true
    adotantes_id?: true
  }

  export type AdocoesSumAggregateInputType = {
    id?: true
    pets_id?: true
    adotantes_id?: true
  }

  export type AdocoesMinAggregateInputType = {
    id?: true
    pets_id?: true
    adotantes_id?: true
    data_adocao?: true
  }

  export type AdocoesMaxAggregateInputType = {
    id?: true
    pets_id?: true
    adotantes_id?: true
    data_adocao?: true
  }

  export type AdocoesCountAggregateInputType = {
    id?: true
    pets_id?: true
    adotantes_id?: true
    data_adocao?: true
    _all?: true
  }

  export type AdocoesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which adocoes to aggregate.
     */
    where?: adocoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adocoes to fetch.
     */
    orderBy?: adocoesOrderByWithRelationInput | adocoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: adocoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adocoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adocoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned adocoes
    **/
    _count?: true | AdocoesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdocoesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdocoesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdocoesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdocoesMaxAggregateInputType
  }

  export type GetAdocoesAggregateType<T extends AdocoesAggregateArgs> = {
        [P in keyof T & keyof AggregateAdocoes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdocoes[P]>
      : GetScalarType<T[P], AggregateAdocoes[P]>
  }




  export type adocoesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: adocoesWhereInput
    orderBy?: adocoesOrderByWithAggregationInput | adocoesOrderByWithAggregationInput[]
    by: AdocoesScalarFieldEnum[] | AdocoesScalarFieldEnum
    having?: adocoesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdocoesCountAggregateInputType | true
    _avg?: AdocoesAvgAggregateInputType
    _sum?: AdocoesSumAggregateInputType
    _min?: AdocoesMinAggregateInputType
    _max?: AdocoesMaxAggregateInputType
  }

  export type AdocoesGroupByOutputType = {
    id: number
    pets_id: number
    adotantes_id: number
    data_adocao: Date
    _count: AdocoesCountAggregateOutputType | null
    _avg: AdocoesAvgAggregateOutputType | null
    _sum: AdocoesSumAggregateOutputType | null
    _min: AdocoesMinAggregateOutputType | null
    _max: AdocoesMaxAggregateOutputType | null
  }

  type GetAdocoesGroupByPayload<T extends adocoesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdocoesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdocoesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdocoesGroupByOutputType[P]>
            : GetScalarType<T[P], AdocoesGroupByOutputType[P]>
        }
      >
    >


  export type adocoesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pets_id?: boolean
    adotantes_id?: boolean
    data_adocao?: boolean
    adotantes?: boolean | adotantesDefaultArgs<ExtArgs>
    pets?: boolean | petsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adocoes"]>

  export type adocoesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pets_id?: boolean
    adotantes_id?: boolean
    data_adocao?: boolean
    adotantes?: boolean | adotantesDefaultArgs<ExtArgs>
    pets?: boolean | petsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adocoes"]>

  export type adocoesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pets_id?: boolean
    adotantes_id?: boolean
    data_adocao?: boolean
    adotantes?: boolean | adotantesDefaultArgs<ExtArgs>
    pets?: boolean | petsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adocoes"]>

  export type adocoesSelectScalar = {
    id?: boolean
    pets_id?: boolean
    adotantes_id?: boolean
    data_adocao?: boolean
  }

  export type adocoesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "pets_id" | "adotantes_id" | "data_adocao", ExtArgs["result"]["adocoes"]>
  export type adocoesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adotantes?: boolean | adotantesDefaultArgs<ExtArgs>
    pets?: boolean | petsDefaultArgs<ExtArgs>
  }
  export type adocoesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adotantes?: boolean | adotantesDefaultArgs<ExtArgs>
    pets?: boolean | petsDefaultArgs<ExtArgs>
  }
  export type adocoesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adotantes?: boolean | adotantesDefaultArgs<ExtArgs>
    pets?: boolean | petsDefaultArgs<ExtArgs>
  }

  export type $adocoesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "adocoes"
    objects: {
      adotantes: Prisma.$adotantesPayload<ExtArgs>
      pets: Prisma.$petsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pets_id: number
      adotantes_id: number
      data_adocao: Date
    }, ExtArgs["result"]["adocoes"]>
    composites: {}
  }

  type adocoesGetPayload<S extends boolean | null | undefined | adocoesDefaultArgs> = $Result.GetResult<Prisma.$adocoesPayload, S>

  type adocoesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<adocoesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdocoesCountAggregateInputType | true
    }

  export interface adocoesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['adocoes'], meta: { name: 'adocoes' } }
    /**
     * Find zero or one Adocoes that matches the filter.
     * @param {adocoesFindUniqueArgs} args - Arguments to find a Adocoes
     * @example
     * // Get one Adocoes
     * const adocoes = await prisma.adocoes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends adocoesFindUniqueArgs>(args: SelectSubset<T, adocoesFindUniqueArgs<ExtArgs>>): Prisma__adocoesClient<$Result.GetResult<Prisma.$adocoesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Adocoes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {adocoesFindUniqueOrThrowArgs} args - Arguments to find a Adocoes
     * @example
     * // Get one Adocoes
     * const adocoes = await prisma.adocoes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends adocoesFindUniqueOrThrowArgs>(args: SelectSubset<T, adocoesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__adocoesClient<$Result.GetResult<Prisma.$adocoesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Adocoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adocoesFindFirstArgs} args - Arguments to find a Adocoes
     * @example
     * // Get one Adocoes
     * const adocoes = await prisma.adocoes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends adocoesFindFirstArgs>(args?: SelectSubset<T, adocoesFindFirstArgs<ExtArgs>>): Prisma__adocoesClient<$Result.GetResult<Prisma.$adocoesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Adocoes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adocoesFindFirstOrThrowArgs} args - Arguments to find a Adocoes
     * @example
     * // Get one Adocoes
     * const adocoes = await prisma.adocoes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends adocoesFindFirstOrThrowArgs>(args?: SelectSubset<T, adocoesFindFirstOrThrowArgs<ExtArgs>>): Prisma__adocoesClient<$Result.GetResult<Prisma.$adocoesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Adocoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adocoesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Adocoes
     * const adocoes = await prisma.adocoes.findMany()
     * 
     * // Get first 10 Adocoes
     * const adocoes = await prisma.adocoes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adocoesWithIdOnly = await prisma.adocoes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends adocoesFindManyArgs>(args?: SelectSubset<T, adocoesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adocoesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Adocoes.
     * @param {adocoesCreateArgs} args - Arguments to create a Adocoes.
     * @example
     * // Create one Adocoes
     * const Adocoes = await prisma.adocoes.create({
     *   data: {
     *     // ... data to create a Adocoes
     *   }
     * })
     * 
     */
    create<T extends adocoesCreateArgs>(args: SelectSubset<T, adocoesCreateArgs<ExtArgs>>): Prisma__adocoesClient<$Result.GetResult<Prisma.$adocoesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Adocoes.
     * @param {adocoesCreateManyArgs} args - Arguments to create many Adocoes.
     * @example
     * // Create many Adocoes
     * const adocoes = await prisma.adocoes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends adocoesCreateManyArgs>(args?: SelectSubset<T, adocoesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Adocoes and returns the data saved in the database.
     * @param {adocoesCreateManyAndReturnArgs} args - Arguments to create many Adocoes.
     * @example
     * // Create many Adocoes
     * const adocoes = await prisma.adocoes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Adocoes and only return the `id`
     * const adocoesWithIdOnly = await prisma.adocoes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends adocoesCreateManyAndReturnArgs>(args?: SelectSubset<T, adocoesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adocoesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Adocoes.
     * @param {adocoesDeleteArgs} args - Arguments to delete one Adocoes.
     * @example
     * // Delete one Adocoes
     * const Adocoes = await prisma.adocoes.delete({
     *   where: {
     *     // ... filter to delete one Adocoes
     *   }
     * })
     * 
     */
    delete<T extends adocoesDeleteArgs>(args: SelectSubset<T, adocoesDeleteArgs<ExtArgs>>): Prisma__adocoesClient<$Result.GetResult<Prisma.$adocoesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Adocoes.
     * @param {adocoesUpdateArgs} args - Arguments to update one Adocoes.
     * @example
     * // Update one Adocoes
     * const adocoes = await prisma.adocoes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends adocoesUpdateArgs>(args: SelectSubset<T, adocoesUpdateArgs<ExtArgs>>): Prisma__adocoesClient<$Result.GetResult<Prisma.$adocoesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Adocoes.
     * @param {adocoesDeleteManyArgs} args - Arguments to filter Adocoes to delete.
     * @example
     * // Delete a few Adocoes
     * const { count } = await prisma.adocoes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends adocoesDeleteManyArgs>(args?: SelectSubset<T, adocoesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adocoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adocoesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Adocoes
     * const adocoes = await prisma.adocoes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends adocoesUpdateManyArgs>(args: SelectSubset<T, adocoesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adocoes and returns the data updated in the database.
     * @param {adocoesUpdateManyAndReturnArgs} args - Arguments to update many Adocoes.
     * @example
     * // Update many Adocoes
     * const adocoes = await prisma.adocoes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Adocoes and only return the `id`
     * const adocoesWithIdOnly = await prisma.adocoes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends adocoesUpdateManyAndReturnArgs>(args: SelectSubset<T, adocoesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adocoesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Adocoes.
     * @param {adocoesUpsertArgs} args - Arguments to update or create a Adocoes.
     * @example
     * // Update or create a Adocoes
     * const adocoes = await prisma.adocoes.upsert({
     *   create: {
     *     // ... data to create a Adocoes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Adocoes we want to update
     *   }
     * })
     */
    upsert<T extends adocoesUpsertArgs>(args: SelectSubset<T, adocoesUpsertArgs<ExtArgs>>): Prisma__adocoesClient<$Result.GetResult<Prisma.$adocoesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Adocoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adocoesCountArgs} args - Arguments to filter Adocoes to count.
     * @example
     * // Count the number of Adocoes
     * const count = await prisma.adocoes.count({
     *   where: {
     *     // ... the filter for the Adocoes we want to count
     *   }
     * })
    **/
    count<T extends adocoesCountArgs>(
      args?: Subset<T, adocoesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdocoesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Adocoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdocoesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdocoesAggregateArgs>(args: Subset<T, AdocoesAggregateArgs>): Prisma.PrismaPromise<GetAdocoesAggregateType<T>>

    /**
     * Group by Adocoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adocoesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends adocoesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: adocoesGroupByArgs['orderBy'] }
        : { orderBy?: adocoesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, adocoesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdocoesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the adocoes model
   */
  readonly fields: adocoesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for adocoes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__adocoesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adotantes<T extends adotantesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, adotantesDefaultArgs<ExtArgs>>): Prisma__adotantesClient<$Result.GetResult<Prisma.$adotantesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    pets<T extends petsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, petsDefaultArgs<ExtArgs>>): Prisma__petsClient<$Result.GetResult<Prisma.$petsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the adocoes model
   */
  interface adocoesFieldRefs {
    readonly id: FieldRef<"adocoes", 'Int'>
    readonly pets_id: FieldRef<"adocoes", 'Int'>
    readonly adotantes_id: FieldRef<"adocoes", 'Int'>
    readonly data_adocao: FieldRef<"adocoes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * adocoes findUnique
   */
  export type adocoesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesInclude<ExtArgs> | null
    /**
     * Filter, which adocoes to fetch.
     */
    where: adocoesWhereUniqueInput
  }

  /**
   * adocoes findUniqueOrThrow
   */
  export type adocoesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesInclude<ExtArgs> | null
    /**
     * Filter, which adocoes to fetch.
     */
    where: adocoesWhereUniqueInput
  }

  /**
   * adocoes findFirst
   */
  export type adocoesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesInclude<ExtArgs> | null
    /**
     * Filter, which adocoes to fetch.
     */
    where?: adocoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adocoes to fetch.
     */
    orderBy?: adocoesOrderByWithRelationInput | adocoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adocoes.
     */
    cursor?: adocoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adocoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adocoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adocoes.
     */
    distinct?: AdocoesScalarFieldEnum | AdocoesScalarFieldEnum[]
  }

  /**
   * adocoes findFirstOrThrow
   */
  export type adocoesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesInclude<ExtArgs> | null
    /**
     * Filter, which adocoes to fetch.
     */
    where?: adocoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adocoes to fetch.
     */
    orderBy?: adocoesOrderByWithRelationInput | adocoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adocoes.
     */
    cursor?: adocoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adocoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adocoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adocoes.
     */
    distinct?: AdocoesScalarFieldEnum | AdocoesScalarFieldEnum[]
  }

  /**
   * adocoes findMany
   */
  export type adocoesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesInclude<ExtArgs> | null
    /**
     * Filter, which adocoes to fetch.
     */
    where?: adocoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adocoes to fetch.
     */
    orderBy?: adocoesOrderByWithRelationInput | adocoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing adocoes.
     */
    cursor?: adocoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adocoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adocoes.
     */
    skip?: number
    distinct?: AdocoesScalarFieldEnum | AdocoesScalarFieldEnum[]
  }

  /**
   * adocoes create
   */
  export type adocoesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesInclude<ExtArgs> | null
    /**
     * The data needed to create a adocoes.
     */
    data: XOR<adocoesCreateInput, adocoesUncheckedCreateInput>
  }

  /**
   * adocoes createMany
   */
  export type adocoesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many adocoes.
     */
    data: adocoesCreateManyInput | adocoesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * adocoes createManyAndReturn
   */
  export type adocoesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * The data used to create many adocoes.
     */
    data: adocoesCreateManyInput | adocoesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * adocoes update
   */
  export type adocoesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesInclude<ExtArgs> | null
    /**
     * The data needed to update a adocoes.
     */
    data: XOR<adocoesUpdateInput, adocoesUncheckedUpdateInput>
    /**
     * Choose, which adocoes to update.
     */
    where: adocoesWhereUniqueInput
  }

  /**
   * adocoes updateMany
   */
  export type adocoesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update adocoes.
     */
    data: XOR<adocoesUpdateManyMutationInput, adocoesUncheckedUpdateManyInput>
    /**
     * Filter which adocoes to update
     */
    where?: adocoesWhereInput
    /**
     * Limit how many adocoes to update.
     */
    limit?: number
  }

  /**
   * adocoes updateManyAndReturn
   */
  export type adocoesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * The data used to update adocoes.
     */
    data: XOR<adocoesUpdateManyMutationInput, adocoesUncheckedUpdateManyInput>
    /**
     * Filter which adocoes to update
     */
    where?: adocoesWhereInput
    /**
     * Limit how many adocoes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * adocoes upsert
   */
  export type adocoesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesInclude<ExtArgs> | null
    /**
     * The filter to search for the adocoes to update in case it exists.
     */
    where: adocoesWhereUniqueInput
    /**
     * In case the adocoes found by the `where` argument doesn't exist, create a new adocoes with this data.
     */
    create: XOR<adocoesCreateInput, adocoesUncheckedCreateInput>
    /**
     * In case the adocoes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<adocoesUpdateInput, adocoesUncheckedUpdateInput>
  }

  /**
   * adocoes delete
   */
  export type adocoesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesInclude<ExtArgs> | null
    /**
     * Filter which adocoes to delete.
     */
    where: adocoesWhereUniqueInput
  }

  /**
   * adocoes deleteMany
   */
  export type adocoesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which adocoes to delete
     */
    where?: adocoesWhereInput
    /**
     * Limit how many adocoes to delete.
     */
    limit?: number
  }

  /**
   * adocoes without action
   */
  export type adocoesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesInclude<ExtArgs> | null
  }


  /**
   * Model adotantes
   */

  export type AggregateAdotantes = {
    _count: AdotantesCountAggregateOutputType | null
    _avg: AdotantesAvgAggregateOutputType | null
    _sum: AdotantesSumAggregateOutputType | null
    _min: AdotantesMinAggregateOutputType | null
    _max: AdotantesMaxAggregateOutputType | null
  }

  export type AdotantesAvgAggregateOutputType = {
    id: number | null
  }

  export type AdotantesSumAggregateOutputType = {
    id: number | null
  }

  export type AdotantesMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    endereco: string | null
  }

  export type AdotantesMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    endereco: string | null
  }

  export type AdotantesCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    telefone: number
    endereco: number
    _all: number
  }


  export type AdotantesAvgAggregateInputType = {
    id?: true
  }

  export type AdotantesSumAggregateInputType = {
    id?: true
  }

  export type AdotantesMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    endereco?: true
  }

  export type AdotantesMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    endereco?: true
  }

  export type AdotantesCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    endereco?: true
    _all?: true
  }

  export type AdotantesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which adotantes to aggregate.
     */
    where?: adotantesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adotantes to fetch.
     */
    orderBy?: adotantesOrderByWithRelationInput | adotantesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: adotantesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adotantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adotantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned adotantes
    **/
    _count?: true | AdotantesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdotantesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdotantesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdotantesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdotantesMaxAggregateInputType
  }

  export type GetAdotantesAggregateType<T extends AdotantesAggregateArgs> = {
        [P in keyof T & keyof AggregateAdotantes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdotantes[P]>
      : GetScalarType<T[P], AggregateAdotantes[P]>
  }




  export type adotantesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: adotantesWhereInput
    orderBy?: adotantesOrderByWithAggregationInput | adotantesOrderByWithAggregationInput[]
    by: AdotantesScalarFieldEnum[] | AdotantesScalarFieldEnum
    having?: adotantesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdotantesCountAggregateInputType | true
    _avg?: AdotantesAvgAggregateInputType
    _sum?: AdotantesSumAggregateInputType
    _min?: AdotantesMinAggregateInputType
    _max?: AdotantesMaxAggregateInputType
  }

  export type AdotantesGroupByOutputType = {
    id: number
    nome: string
    email: string
    telefone: string
    endereco: string
    _count: AdotantesCountAggregateOutputType | null
    _avg: AdotantesAvgAggregateOutputType | null
    _sum: AdotantesSumAggregateOutputType | null
    _min: AdotantesMinAggregateOutputType | null
    _max: AdotantesMaxAggregateOutputType | null
  }

  type GetAdotantesGroupByPayload<T extends adotantesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdotantesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdotantesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdotantesGroupByOutputType[P]>
            : GetScalarType<T[P], AdotantesGroupByOutputType[P]>
        }
      >
    >


  export type adotantesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    endereco?: boolean
    adocoes?: boolean | adotantes$adocoesArgs<ExtArgs>
    _count?: boolean | AdotantesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adotantes"]>

  export type adotantesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    endereco?: boolean
  }, ExtArgs["result"]["adotantes"]>

  export type adotantesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    endereco?: boolean
  }, ExtArgs["result"]["adotantes"]>

  export type adotantesSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    endereco?: boolean
  }

  export type adotantesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "telefone" | "endereco", ExtArgs["result"]["adotantes"]>
  export type adotantesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adocoes?: boolean | adotantes$adocoesArgs<ExtArgs>
    _count?: boolean | AdotantesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type adotantesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type adotantesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $adotantesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "adotantes"
    objects: {
      adocoes: Prisma.$adocoesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      telefone: string
      endereco: string
    }, ExtArgs["result"]["adotantes"]>
    composites: {}
  }

  type adotantesGetPayload<S extends boolean | null | undefined | adotantesDefaultArgs> = $Result.GetResult<Prisma.$adotantesPayload, S>

  type adotantesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<adotantesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdotantesCountAggregateInputType | true
    }

  export interface adotantesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['adotantes'], meta: { name: 'adotantes' } }
    /**
     * Find zero or one Adotantes that matches the filter.
     * @param {adotantesFindUniqueArgs} args - Arguments to find a Adotantes
     * @example
     * // Get one Adotantes
     * const adotantes = await prisma.adotantes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends adotantesFindUniqueArgs>(args: SelectSubset<T, adotantesFindUniqueArgs<ExtArgs>>): Prisma__adotantesClient<$Result.GetResult<Prisma.$adotantesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Adotantes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {adotantesFindUniqueOrThrowArgs} args - Arguments to find a Adotantes
     * @example
     * // Get one Adotantes
     * const adotantes = await prisma.adotantes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends adotantesFindUniqueOrThrowArgs>(args: SelectSubset<T, adotantesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__adotantesClient<$Result.GetResult<Prisma.$adotantesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Adotantes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adotantesFindFirstArgs} args - Arguments to find a Adotantes
     * @example
     * // Get one Adotantes
     * const adotantes = await prisma.adotantes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends adotantesFindFirstArgs>(args?: SelectSubset<T, adotantesFindFirstArgs<ExtArgs>>): Prisma__adotantesClient<$Result.GetResult<Prisma.$adotantesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Adotantes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adotantesFindFirstOrThrowArgs} args - Arguments to find a Adotantes
     * @example
     * // Get one Adotantes
     * const adotantes = await prisma.adotantes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends adotantesFindFirstOrThrowArgs>(args?: SelectSubset<T, adotantesFindFirstOrThrowArgs<ExtArgs>>): Prisma__adotantesClient<$Result.GetResult<Prisma.$adotantesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Adotantes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adotantesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Adotantes
     * const adotantes = await prisma.adotantes.findMany()
     * 
     * // Get first 10 Adotantes
     * const adotantes = await prisma.adotantes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adotantesWithIdOnly = await prisma.adotantes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends adotantesFindManyArgs>(args?: SelectSubset<T, adotantesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adotantesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Adotantes.
     * @param {adotantesCreateArgs} args - Arguments to create a Adotantes.
     * @example
     * // Create one Adotantes
     * const Adotantes = await prisma.adotantes.create({
     *   data: {
     *     // ... data to create a Adotantes
     *   }
     * })
     * 
     */
    create<T extends adotantesCreateArgs>(args: SelectSubset<T, adotantesCreateArgs<ExtArgs>>): Prisma__adotantesClient<$Result.GetResult<Prisma.$adotantesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Adotantes.
     * @param {adotantesCreateManyArgs} args - Arguments to create many Adotantes.
     * @example
     * // Create many Adotantes
     * const adotantes = await prisma.adotantes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends adotantesCreateManyArgs>(args?: SelectSubset<T, adotantesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Adotantes and returns the data saved in the database.
     * @param {adotantesCreateManyAndReturnArgs} args - Arguments to create many Adotantes.
     * @example
     * // Create many Adotantes
     * const adotantes = await prisma.adotantes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Adotantes and only return the `id`
     * const adotantesWithIdOnly = await prisma.adotantes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends adotantesCreateManyAndReturnArgs>(args?: SelectSubset<T, adotantesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adotantesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Adotantes.
     * @param {adotantesDeleteArgs} args - Arguments to delete one Adotantes.
     * @example
     * // Delete one Adotantes
     * const Adotantes = await prisma.adotantes.delete({
     *   where: {
     *     // ... filter to delete one Adotantes
     *   }
     * })
     * 
     */
    delete<T extends adotantesDeleteArgs>(args: SelectSubset<T, adotantesDeleteArgs<ExtArgs>>): Prisma__adotantesClient<$Result.GetResult<Prisma.$adotantesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Adotantes.
     * @param {adotantesUpdateArgs} args - Arguments to update one Adotantes.
     * @example
     * // Update one Adotantes
     * const adotantes = await prisma.adotantes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends adotantesUpdateArgs>(args: SelectSubset<T, adotantesUpdateArgs<ExtArgs>>): Prisma__adotantesClient<$Result.GetResult<Prisma.$adotantesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Adotantes.
     * @param {adotantesDeleteManyArgs} args - Arguments to filter Adotantes to delete.
     * @example
     * // Delete a few Adotantes
     * const { count } = await prisma.adotantes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends adotantesDeleteManyArgs>(args?: SelectSubset<T, adotantesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adotantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adotantesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Adotantes
     * const adotantes = await prisma.adotantes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends adotantesUpdateManyArgs>(args: SelectSubset<T, adotantesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adotantes and returns the data updated in the database.
     * @param {adotantesUpdateManyAndReturnArgs} args - Arguments to update many Adotantes.
     * @example
     * // Update many Adotantes
     * const adotantes = await prisma.adotantes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Adotantes and only return the `id`
     * const adotantesWithIdOnly = await prisma.adotantes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends adotantesUpdateManyAndReturnArgs>(args: SelectSubset<T, adotantesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adotantesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Adotantes.
     * @param {adotantesUpsertArgs} args - Arguments to update or create a Adotantes.
     * @example
     * // Update or create a Adotantes
     * const adotantes = await prisma.adotantes.upsert({
     *   create: {
     *     // ... data to create a Adotantes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Adotantes we want to update
     *   }
     * })
     */
    upsert<T extends adotantesUpsertArgs>(args: SelectSubset<T, adotantesUpsertArgs<ExtArgs>>): Prisma__adotantesClient<$Result.GetResult<Prisma.$adotantesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Adotantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adotantesCountArgs} args - Arguments to filter Adotantes to count.
     * @example
     * // Count the number of Adotantes
     * const count = await prisma.adotantes.count({
     *   where: {
     *     // ... the filter for the Adotantes we want to count
     *   }
     * })
    **/
    count<T extends adotantesCountArgs>(
      args?: Subset<T, adotantesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdotantesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Adotantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdotantesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdotantesAggregateArgs>(args: Subset<T, AdotantesAggregateArgs>): Prisma.PrismaPromise<GetAdotantesAggregateType<T>>

    /**
     * Group by Adotantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adotantesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends adotantesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: adotantesGroupByArgs['orderBy'] }
        : { orderBy?: adotantesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, adotantesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdotantesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the adotantes model
   */
  readonly fields: adotantesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for adotantes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__adotantesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adocoes<T extends adotantes$adocoesArgs<ExtArgs> = {}>(args?: Subset<T, adotantes$adocoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adocoesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the adotantes model
   */
  interface adotantesFieldRefs {
    readonly id: FieldRef<"adotantes", 'Int'>
    readonly nome: FieldRef<"adotantes", 'String'>
    readonly email: FieldRef<"adotantes", 'String'>
    readonly telefone: FieldRef<"adotantes", 'String'>
    readonly endereco: FieldRef<"adotantes", 'String'>
  }
    

  // Custom InputTypes
  /**
   * adotantes findUnique
   */
  export type adotantesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adotantes
     */
    select?: adotantesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adotantes
     */
    omit?: adotantesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adotantesInclude<ExtArgs> | null
    /**
     * Filter, which adotantes to fetch.
     */
    where: adotantesWhereUniqueInput
  }

  /**
   * adotantes findUniqueOrThrow
   */
  export type adotantesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adotantes
     */
    select?: adotantesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adotantes
     */
    omit?: adotantesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adotantesInclude<ExtArgs> | null
    /**
     * Filter, which adotantes to fetch.
     */
    where: adotantesWhereUniqueInput
  }

  /**
   * adotantes findFirst
   */
  export type adotantesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adotantes
     */
    select?: adotantesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adotantes
     */
    omit?: adotantesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adotantesInclude<ExtArgs> | null
    /**
     * Filter, which adotantes to fetch.
     */
    where?: adotantesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adotantes to fetch.
     */
    orderBy?: adotantesOrderByWithRelationInput | adotantesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adotantes.
     */
    cursor?: adotantesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adotantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adotantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adotantes.
     */
    distinct?: AdotantesScalarFieldEnum | AdotantesScalarFieldEnum[]
  }

  /**
   * adotantes findFirstOrThrow
   */
  export type adotantesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adotantes
     */
    select?: adotantesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adotantes
     */
    omit?: adotantesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adotantesInclude<ExtArgs> | null
    /**
     * Filter, which adotantes to fetch.
     */
    where?: adotantesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adotantes to fetch.
     */
    orderBy?: adotantesOrderByWithRelationInput | adotantesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adotantes.
     */
    cursor?: adotantesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adotantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adotantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adotantes.
     */
    distinct?: AdotantesScalarFieldEnum | AdotantesScalarFieldEnum[]
  }

  /**
   * adotantes findMany
   */
  export type adotantesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adotantes
     */
    select?: adotantesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adotantes
     */
    omit?: adotantesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adotantesInclude<ExtArgs> | null
    /**
     * Filter, which adotantes to fetch.
     */
    where?: adotantesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adotantes to fetch.
     */
    orderBy?: adotantesOrderByWithRelationInput | adotantesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing adotantes.
     */
    cursor?: adotantesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adotantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adotantes.
     */
    skip?: number
    distinct?: AdotantesScalarFieldEnum | AdotantesScalarFieldEnum[]
  }

  /**
   * adotantes create
   */
  export type adotantesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adotantes
     */
    select?: adotantesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adotantes
     */
    omit?: adotantesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adotantesInclude<ExtArgs> | null
    /**
     * The data needed to create a adotantes.
     */
    data: XOR<adotantesCreateInput, adotantesUncheckedCreateInput>
  }

  /**
   * adotantes createMany
   */
  export type adotantesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many adotantes.
     */
    data: adotantesCreateManyInput | adotantesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * adotantes createManyAndReturn
   */
  export type adotantesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adotantes
     */
    select?: adotantesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the adotantes
     */
    omit?: adotantesOmit<ExtArgs> | null
    /**
     * The data used to create many adotantes.
     */
    data: adotantesCreateManyInput | adotantesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * adotantes update
   */
  export type adotantesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adotantes
     */
    select?: adotantesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adotantes
     */
    omit?: adotantesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adotantesInclude<ExtArgs> | null
    /**
     * The data needed to update a adotantes.
     */
    data: XOR<adotantesUpdateInput, adotantesUncheckedUpdateInput>
    /**
     * Choose, which adotantes to update.
     */
    where: adotantesWhereUniqueInput
  }

  /**
   * adotantes updateMany
   */
  export type adotantesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update adotantes.
     */
    data: XOR<adotantesUpdateManyMutationInput, adotantesUncheckedUpdateManyInput>
    /**
     * Filter which adotantes to update
     */
    where?: adotantesWhereInput
    /**
     * Limit how many adotantes to update.
     */
    limit?: number
  }

  /**
   * adotantes updateManyAndReturn
   */
  export type adotantesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adotantes
     */
    select?: adotantesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the adotantes
     */
    omit?: adotantesOmit<ExtArgs> | null
    /**
     * The data used to update adotantes.
     */
    data: XOR<adotantesUpdateManyMutationInput, adotantesUncheckedUpdateManyInput>
    /**
     * Filter which adotantes to update
     */
    where?: adotantesWhereInput
    /**
     * Limit how many adotantes to update.
     */
    limit?: number
  }

  /**
   * adotantes upsert
   */
  export type adotantesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adotantes
     */
    select?: adotantesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adotantes
     */
    omit?: adotantesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adotantesInclude<ExtArgs> | null
    /**
     * The filter to search for the adotantes to update in case it exists.
     */
    where: adotantesWhereUniqueInput
    /**
     * In case the adotantes found by the `where` argument doesn't exist, create a new adotantes with this data.
     */
    create: XOR<adotantesCreateInput, adotantesUncheckedCreateInput>
    /**
     * In case the adotantes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<adotantesUpdateInput, adotantesUncheckedUpdateInput>
  }

  /**
   * adotantes delete
   */
  export type adotantesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adotantes
     */
    select?: adotantesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adotantes
     */
    omit?: adotantesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adotantesInclude<ExtArgs> | null
    /**
     * Filter which adotantes to delete.
     */
    where: adotantesWhereUniqueInput
  }

  /**
   * adotantes deleteMany
   */
  export type adotantesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which adotantes to delete
     */
    where?: adotantesWhereInput
    /**
     * Limit how many adotantes to delete.
     */
    limit?: number
  }

  /**
   * adotantes.adocoes
   */
  export type adotantes$adocoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesInclude<ExtArgs> | null
    where?: adocoesWhereInput
    orderBy?: adocoesOrderByWithRelationInput | adocoesOrderByWithRelationInput[]
    cursor?: adocoesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdocoesScalarFieldEnum | AdocoesScalarFieldEnum[]
  }

  /**
   * adotantes without action
   */
  export type adotantesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adotantes
     */
    select?: adotantesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adotantes
     */
    omit?: adotantesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adotantesInclude<ExtArgs> | null
  }


  /**
   * Model pets
   */

  export type AggregatePets = {
    _count: PetsCountAggregateOutputType | null
    _avg: PetsAvgAggregateOutputType | null
    _sum: PetsSumAggregateOutputType | null
    _min: PetsMinAggregateOutputType | null
    _max: PetsMaxAggregateOutputType | null
  }

  export type PetsAvgAggregateOutputType = {
    id: number | null
  }

  export type PetsSumAggregateOutputType = {
    id: number | null
  }

  export type PetsMinAggregateOutputType = {
    id: number | null
    nome: string | null
    especie: string | null
    nascimento: Date | null
    descricao: string | null
    estado: $Enums.estado | null
    tamanho: $Enums.tamanho | null
    personalidade: string | null
    avatar: string | null
    fotos: string | null
  }

  export type PetsMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    especie: string | null
    nascimento: Date | null
    descricao: string | null
    estado: $Enums.estado | null
    tamanho: $Enums.tamanho | null
    personalidade: string | null
    avatar: string | null
    fotos: string | null
  }

  export type PetsCountAggregateOutputType = {
    id: number
    nome: number
    especie: number
    nascimento: number
    descricao: number
    estado: number
    tamanho: number
    personalidade: number
    avatar: number
    fotos: number
    _all: number
  }


  export type PetsAvgAggregateInputType = {
    id?: true
  }

  export type PetsSumAggregateInputType = {
    id?: true
  }

  export type PetsMinAggregateInputType = {
    id?: true
    nome?: true
    especie?: true
    nascimento?: true
    descricao?: true
    estado?: true
    tamanho?: true
    personalidade?: true
    avatar?: true
    fotos?: true
  }

  export type PetsMaxAggregateInputType = {
    id?: true
    nome?: true
    especie?: true
    nascimento?: true
    descricao?: true
    estado?: true
    tamanho?: true
    personalidade?: true
    avatar?: true
    fotos?: true
  }

  export type PetsCountAggregateInputType = {
    id?: true
    nome?: true
    especie?: true
    nascimento?: true
    descricao?: true
    estado?: true
    tamanho?: true
    personalidade?: true
    avatar?: true
    fotos?: true
    _all?: true
  }

  export type PetsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pets to aggregate.
     */
    where?: petsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pets to fetch.
     */
    orderBy?: petsOrderByWithRelationInput | petsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: petsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pets
    **/
    _count?: true | PetsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PetsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PetsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PetsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PetsMaxAggregateInputType
  }

  export type GetPetsAggregateType<T extends PetsAggregateArgs> = {
        [P in keyof T & keyof AggregatePets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePets[P]>
      : GetScalarType<T[P], AggregatePets[P]>
  }




  export type petsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: petsWhereInput
    orderBy?: petsOrderByWithAggregationInput | petsOrderByWithAggregationInput[]
    by: PetsScalarFieldEnum[] | PetsScalarFieldEnum
    having?: petsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PetsCountAggregateInputType | true
    _avg?: PetsAvgAggregateInputType
    _sum?: PetsSumAggregateInputType
    _min?: PetsMinAggregateInputType
    _max?: PetsMaxAggregateInputType
  }

  export type PetsGroupByOutputType = {
    id: number
    nome: string
    especie: string
    nascimento: Date
    descricao: string | null
    estado: $Enums.estado
    tamanho: $Enums.tamanho | null
    personalidade: string | null
    avatar: string | null
    fotos: string | null
    _count: PetsCountAggregateOutputType | null
    _avg: PetsAvgAggregateOutputType | null
    _sum: PetsSumAggregateOutputType | null
    _min: PetsMinAggregateOutputType | null
    _max: PetsMaxAggregateOutputType | null
  }

  type GetPetsGroupByPayload<T extends petsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PetsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PetsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PetsGroupByOutputType[P]>
            : GetScalarType<T[P], PetsGroupByOutputType[P]>
        }
      >
    >


  export type petsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    especie?: boolean
    nascimento?: boolean
    descricao?: boolean
    estado?: boolean
    tamanho?: boolean
    personalidade?: boolean
    avatar?: boolean
    fotos?: boolean
    adocoes?: boolean | pets$adocoesArgs<ExtArgs>
    _count?: boolean | PetsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pets"]>

  export type petsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    especie?: boolean
    nascimento?: boolean
    descricao?: boolean
    estado?: boolean
    tamanho?: boolean
    personalidade?: boolean
    avatar?: boolean
    fotos?: boolean
  }, ExtArgs["result"]["pets"]>

  export type petsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    especie?: boolean
    nascimento?: boolean
    descricao?: boolean
    estado?: boolean
    tamanho?: boolean
    personalidade?: boolean
    avatar?: boolean
    fotos?: boolean
  }, ExtArgs["result"]["pets"]>

  export type petsSelectScalar = {
    id?: boolean
    nome?: boolean
    especie?: boolean
    nascimento?: boolean
    descricao?: boolean
    estado?: boolean
    tamanho?: boolean
    personalidade?: boolean
    avatar?: boolean
    fotos?: boolean
  }

  export type petsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "especie" | "nascimento" | "descricao" | "estado" | "tamanho" | "personalidade" | "avatar" | "fotos", ExtArgs["result"]["pets"]>
  export type petsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adocoes?: boolean | pets$adocoesArgs<ExtArgs>
    _count?: boolean | PetsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type petsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type petsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $petsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "pets"
    objects: {
      adocoes: Prisma.$adocoesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      especie: string
      nascimento: Date
      descricao: string | null
      estado: $Enums.estado
      tamanho: $Enums.tamanho | null
      personalidade: string | null
      avatar: string | null
      fotos: string | null
    }, ExtArgs["result"]["pets"]>
    composites: {}
  }

  type petsGetPayload<S extends boolean | null | undefined | petsDefaultArgs> = $Result.GetResult<Prisma.$petsPayload, S>

  type petsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<petsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PetsCountAggregateInputType | true
    }

  export interface petsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['pets'], meta: { name: 'pets' } }
    /**
     * Find zero or one Pets that matches the filter.
     * @param {petsFindUniqueArgs} args - Arguments to find a Pets
     * @example
     * // Get one Pets
     * const pets = await prisma.pets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends petsFindUniqueArgs>(args: SelectSubset<T, petsFindUniqueArgs<ExtArgs>>): Prisma__petsClient<$Result.GetResult<Prisma.$petsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Pets that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {petsFindUniqueOrThrowArgs} args - Arguments to find a Pets
     * @example
     * // Get one Pets
     * const pets = await prisma.pets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends petsFindUniqueOrThrowArgs>(args: SelectSubset<T, petsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__petsClient<$Result.GetResult<Prisma.$petsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {petsFindFirstArgs} args - Arguments to find a Pets
     * @example
     * // Get one Pets
     * const pets = await prisma.pets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends petsFindFirstArgs>(args?: SelectSubset<T, petsFindFirstArgs<ExtArgs>>): Prisma__petsClient<$Result.GetResult<Prisma.$petsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {petsFindFirstOrThrowArgs} args - Arguments to find a Pets
     * @example
     * // Get one Pets
     * const pets = await prisma.pets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends petsFindFirstOrThrowArgs>(args?: SelectSubset<T, petsFindFirstOrThrowArgs<ExtArgs>>): Prisma__petsClient<$Result.GetResult<Prisma.$petsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {petsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pets
     * const pets = await prisma.pets.findMany()
     * 
     * // Get first 10 Pets
     * const pets = await prisma.pets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const petsWithIdOnly = await prisma.pets.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends petsFindManyArgs>(args?: SelectSubset<T, petsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$petsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Pets.
     * @param {petsCreateArgs} args - Arguments to create a Pets.
     * @example
     * // Create one Pets
     * const Pets = await prisma.pets.create({
     *   data: {
     *     // ... data to create a Pets
     *   }
     * })
     * 
     */
    create<T extends petsCreateArgs>(args: SelectSubset<T, petsCreateArgs<ExtArgs>>): Prisma__petsClient<$Result.GetResult<Prisma.$petsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pets.
     * @param {petsCreateManyArgs} args - Arguments to create many Pets.
     * @example
     * // Create many Pets
     * const pets = await prisma.pets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends petsCreateManyArgs>(args?: SelectSubset<T, petsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pets and returns the data saved in the database.
     * @param {petsCreateManyAndReturnArgs} args - Arguments to create many Pets.
     * @example
     * // Create many Pets
     * const pets = await prisma.pets.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pets and only return the `id`
     * const petsWithIdOnly = await prisma.pets.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends petsCreateManyAndReturnArgs>(args?: SelectSubset<T, petsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$petsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Pets.
     * @param {petsDeleteArgs} args - Arguments to delete one Pets.
     * @example
     * // Delete one Pets
     * const Pets = await prisma.pets.delete({
     *   where: {
     *     // ... filter to delete one Pets
     *   }
     * })
     * 
     */
    delete<T extends petsDeleteArgs>(args: SelectSubset<T, petsDeleteArgs<ExtArgs>>): Prisma__petsClient<$Result.GetResult<Prisma.$petsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Pets.
     * @param {petsUpdateArgs} args - Arguments to update one Pets.
     * @example
     * // Update one Pets
     * const pets = await prisma.pets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends petsUpdateArgs>(args: SelectSubset<T, petsUpdateArgs<ExtArgs>>): Prisma__petsClient<$Result.GetResult<Prisma.$petsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pets.
     * @param {petsDeleteManyArgs} args - Arguments to filter Pets to delete.
     * @example
     * // Delete a few Pets
     * const { count } = await prisma.pets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends petsDeleteManyArgs>(args?: SelectSubset<T, petsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {petsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pets
     * const pets = await prisma.pets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends petsUpdateManyArgs>(args: SelectSubset<T, petsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pets and returns the data updated in the database.
     * @param {petsUpdateManyAndReturnArgs} args - Arguments to update many Pets.
     * @example
     * // Update many Pets
     * const pets = await prisma.pets.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pets and only return the `id`
     * const petsWithIdOnly = await prisma.pets.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends petsUpdateManyAndReturnArgs>(args: SelectSubset<T, petsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$petsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Pets.
     * @param {petsUpsertArgs} args - Arguments to update or create a Pets.
     * @example
     * // Update or create a Pets
     * const pets = await prisma.pets.upsert({
     *   create: {
     *     // ... data to create a Pets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pets we want to update
     *   }
     * })
     */
    upsert<T extends petsUpsertArgs>(args: SelectSubset<T, petsUpsertArgs<ExtArgs>>): Prisma__petsClient<$Result.GetResult<Prisma.$petsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {petsCountArgs} args - Arguments to filter Pets to count.
     * @example
     * // Count the number of Pets
     * const count = await prisma.pets.count({
     *   where: {
     *     // ... the filter for the Pets we want to count
     *   }
     * })
    **/
    count<T extends petsCountArgs>(
      args?: Subset<T, petsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PetsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PetsAggregateArgs>(args: Subset<T, PetsAggregateArgs>): Prisma.PrismaPromise<GetPetsAggregateType<T>>

    /**
     * Group by Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {petsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends petsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: petsGroupByArgs['orderBy'] }
        : { orderBy?: petsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, petsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the pets model
   */
  readonly fields: petsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for pets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__petsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adocoes<T extends pets$adocoesArgs<ExtArgs> = {}>(args?: Subset<T, pets$adocoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adocoesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the pets model
   */
  interface petsFieldRefs {
    readonly id: FieldRef<"pets", 'Int'>
    readonly nome: FieldRef<"pets", 'String'>
    readonly especie: FieldRef<"pets", 'String'>
    readonly nascimento: FieldRef<"pets", 'DateTime'>
    readonly descricao: FieldRef<"pets", 'String'>
    readonly estado: FieldRef<"pets", 'estado'>
    readonly tamanho: FieldRef<"pets", 'tamanho'>
    readonly personalidade: FieldRef<"pets", 'String'>
    readonly avatar: FieldRef<"pets", 'String'>
    readonly fotos: FieldRef<"pets", 'String'>
  }
    

  // Custom InputTypes
  /**
   * pets findUnique
   */
  export type petsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pets
     */
    select?: petsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pets
     */
    omit?: petsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: petsInclude<ExtArgs> | null
    /**
     * Filter, which pets to fetch.
     */
    where: petsWhereUniqueInput
  }

  /**
   * pets findUniqueOrThrow
   */
  export type petsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pets
     */
    select?: petsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pets
     */
    omit?: petsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: petsInclude<ExtArgs> | null
    /**
     * Filter, which pets to fetch.
     */
    where: petsWhereUniqueInput
  }

  /**
   * pets findFirst
   */
  export type petsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pets
     */
    select?: petsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pets
     */
    omit?: petsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: petsInclude<ExtArgs> | null
    /**
     * Filter, which pets to fetch.
     */
    where?: petsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pets to fetch.
     */
    orderBy?: petsOrderByWithRelationInput | petsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pets.
     */
    cursor?: petsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pets.
     */
    distinct?: PetsScalarFieldEnum | PetsScalarFieldEnum[]
  }

  /**
   * pets findFirstOrThrow
   */
  export type petsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pets
     */
    select?: petsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pets
     */
    omit?: petsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: petsInclude<ExtArgs> | null
    /**
     * Filter, which pets to fetch.
     */
    where?: petsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pets to fetch.
     */
    orderBy?: petsOrderByWithRelationInput | petsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pets.
     */
    cursor?: petsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pets.
     */
    distinct?: PetsScalarFieldEnum | PetsScalarFieldEnum[]
  }

  /**
   * pets findMany
   */
  export type petsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pets
     */
    select?: petsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pets
     */
    omit?: petsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: petsInclude<ExtArgs> | null
    /**
     * Filter, which pets to fetch.
     */
    where?: petsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pets to fetch.
     */
    orderBy?: petsOrderByWithRelationInput | petsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pets.
     */
    cursor?: petsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pets.
     */
    skip?: number
    distinct?: PetsScalarFieldEnum | PetsScalarFieldEnum[]
  }

  /**
   * pets create
   */
  export type petsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pets
     */
    select?: petsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pets
     */
    omit?: petsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: petsInclude<ExtArgs> | null
    /**
     * The data needed to create a pets.
     */
    data: XOR<petsCreateInput, petsUncheckedCreateInput>
  }

  /**
   * pets createMany
   */
  export type petsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many pets.
     */
    data: petsCreateManyInput | petsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * pets createManyAndReturn
   */
  export type petsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pets
     */
    select?: petsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the pets
     */
    omit?: petsOmit<ExtArgs> | null
    /**
     * The data used to create many pets.
     */
    data: petsCreateManyInput | petsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * pets update
   */
  export type petsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pets
     */
    select?: petsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pets
     */
    omit?: petsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: petsInclude<ExtArgs> | null
    /**
     * The data needed to update a pets.
     */
    data: XOR<petsUpdateInput, petsUncheckedUpdateInput>
    /**
     * Choose, which pets to update.
     */
    where: petsWhereUniqueInput
  }

  /**
   * pets updateMany
   */
  export type petsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update pets.
     */
    data: XOR<petsUpdateManyMutationInput, petsUncheckedUpdateManyInput>
    /**
     * Filter which pets to update
     */
    where?: petsWhereInput
    /**
     * Limit how many pets to update.
     */
    limit?: number
  }

  /**
   * pets updateManyAndReturn
   */
  export type petsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pets
     */
    select?: petsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the pets
     */
    omit?: petsOmit<ExtArgs> | null
    /**
     * The data used to update pets.
     */
    data: XOR<petsUpdateManyMutationInput, petsUncheckedUpdateManyInput>
    /**
     * Filter which pets to update
     */
    where?: petsWhereInput
    /**
     * Limit how many pets to update.
     */
    limit?: number
  }

  /**
   * pets upsert
   */
  export type petsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pets
     */
    select?: petsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pets
     */
    omit?: petsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: petsInclude<ExtArgs> | null
    /**
     * The filter to search for the pets to update in case it exists.
     */
    where: petsWhereUniqueInput
    /**
     * In case the pets found by the `where` argument doesn't exist, create a new pets with this data.
     */
    create: XOR<petsCreateInput, petsUncheckedCreateInput>
    /**
     * In case the pets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<petsUpdateInput, petsUncheckedUpdateInput>
  }

  /**
   * pets delete
   */
  export type petsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pets
     */
    select?: petsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pets
     */
    omit?: petsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: petsInclude<ExtArgs> | null
    /**
     * Filter which pets to delete.
     */
    where: petsWhereUniqueInput
  }

  /**
   * pets deleteMany
   */
  export type petsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pets to delete
     */
    where?: petsWhereInput
    /**
     * Limit how many pets to delete.
     */
    limit?: number
  }

  /**
   * pets.adocoes
   */
  export type pets$adocoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adocoes
     */
    select?: adocoesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adocoes
     */
    omit?: adocoesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adocoesInclude<ExtArgs> | null
    where?: adocoesWhereInput
    orderBy?: adocoesOrderByWithRelationInput | adocoesOrderByWithRelationInput[]
    cursor?: adocoesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdocoesScalarFieldEnum | AdocoesScalarFieldEnum[]
  }

  /**
   * pets without action
   */
  export type petsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pets
     */
    select?: petsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pets
     */
    omit?: petsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: petsInclude<ExtArgs> | null
  }


  /**
   * Model usuarios
   */

  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    id: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    id: number | null
    nome: string | null
    telefone: string | null
    email: string | null
    senha: string | null
    usuarioadmin: boolean | null
  }

  export type UsuariosMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    telefone: string | null
    email: string | null
    senha: string | null
    usuarioadmin: boolean | null
  }

  export type UsuariosCountAggregateOutputType = {
    id: number
    nome: number
    telefone: number
    email: number
    senha: number
    usuarioadmin: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    id?: true
  }

  export type UsuariosSumAggregateInputType = {
    id?: true
  }

  export type UsuariosMinAggregateInputType = {
    id?: true
    nome?: true
    telefone?: true
    email?: true
    senha?: true
    usuarioadmin?: true
  }

  export type UsuariosMaxAggregateInputType = {
    id?: true
    nome?: true
    telefone?: true
    email?: true
    senha?: true
    usuarioadmin?: true
  }

  export type UsuariosCountAggregateInputType = {
    id?: true
    nome?: true
    telefone?: true
    email?: true
    senha?: true
    usuarioadmin?: true
    _all?: true
  }

  export type UsuariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to aggregate.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type usuariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuariosWhereInput
    orderBy?: usuariosOrderByWithAggregationInput | usuariosOrderByWithAggregationInput[]
    by: UsuariosScalarFieldEnum[] | UsuariosScalarFieldEnum
    having?: usuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }

  export type UsuariosGroupByOutputType = {
    id: number
    nome: string
    telefone: string
    email: string
    senha: string
    usuarioadmin: boolean | null
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends usuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type usuariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    telefone?: boolean
    email?: boolean
    senha?: boolean
    usuarioadmin?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    telefone?: boolean
    email?: boolean
    senha?: boolean
    usuarioadmin?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    telefone?: boolean
    email?: boolean
    senha?: boolean
    usuarioadmin?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectScalar = {
    id?: boolean
    nome?: boolean
    telefone?: boolean
    email?: boolean
    senha?: boolean
    usuarioadmin?: boolean
  }

  export type usuariosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "telefone" | "email" | "senha" | "usuarioadmin", ExtArgs["result"]["usuarios"]>

  export type $usuariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuarios"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      telefone: string
      email: string
      senha: string
      usuarioadmin: boolean | null
    }, ExtArgs["result"]["usuarios"]>
    composites: {}
  }

  type usuariosGetPayload<S extends boolean | null | undefined | usuariosDefaultArgs> = $Result.GetResult<Prisma.$usuariosPayload, S>

  type usuariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usuariosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface usuariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuarios'], meta: { name: 'usuarios' } }
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {usuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usuariosFindUniqueArgs>(args: SelectSubset<T, usuariosFindUniqueArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuarios that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usuariosFindUniqueOrThrowArgs>(args: SelectSubset<T, usuariosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usuariosFindFirstArgs>(args?: SelectSubset<T, usuariosFindFirstArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usuariosFindFirstOrThrowArgs>(args?: SelectSubset<T, usuariosFindFirstOrThrowArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usuariosFindManyArgs>(args?: SelectSubset<T, usuariosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuarios.
     * @param {usuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
     */
    create<T extends usuariosCreateArgs>(args: SelectSubset<T, usuariosCreateArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {usuariosCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usuariosCreateManyArgs>(args?: SelectSubset<T, usuariosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {usuariosCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usuariosCreateManyAndReturnArgs>(args?: SelectSubset<T, usuariosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuarios.
     * @param {usuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
     */
    delete<T extends usuariosDeleteArgs>(args: SelectSubset<T, usuariosDeleteArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuarios.
     * @param {usuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usuariosUpdateArgs>(args: SelectSubset<T, usuariosUpdateArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {usuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usuariosDeleteManyArgs>(args?: SelectSubset<T, usuariosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usuariosUpdateManyArgs>(args: SelectSubset<T, usuariosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {usuariosUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usuariosUpdateManyAndReturnArgs>(args: SelectSubset<T, usuariosUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuarios.
     * @param {usuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
     */
    upsert<T extends usuariosUpsertArgs>(args: SelectSubset<T, usuariosUpsertArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuariosCountArgs>(
      args?: Subset<T, usuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuariosGroupByArgs['orderBy'] }
        : { orderBy?: usuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuarios model
   */
  readonly fields: usuariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the usuarios model
   */
  interface usuariosFieldRefs {
    readonly id: FieldRef<"usuarios", 'Int'>
    readonly nome: FieldRef<"usuarios", 'String'>
    readonly telefone: FieldRef<"usuarios", 'String'>
    readonly email: FieldRef<"usuarios", 'String'>
    readonly senha: FieldRef<"usuarios", 'String'>
    readonly usuarioadmin: FieldRef<"usuarios", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * usuarios findUnique
   */
  export type usuariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios findUniqueOrThrow
   */
  export type usuariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios findFirst
   */
  export type usuariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios findFirstOrThrow
   */
  export type usuariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios findMany
   */
  export type usuariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios create
   */
  export type usuariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The data needed to create a usuarios.
     */
    data: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
  }

  /**
   * usuarios createMany
   */
  export type usuariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuariosCreateManyInput | usuariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usuarios createManyAndReturn
   */
  export type usuariosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The data used to create many usuarios.
     */
    data: usuariosCreateManyInput | usuariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usuarios update
   */
  export type usuariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The data needed to update a usuarios.
     */
    data: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
    /**
     * Choose, which usuarios to update.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios updateMany
   */
  export type usuariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuariosWhereInput
    /**
     * Limit how many usuarios to update.
     */
    limit?: number
  }

  /**
   * usuarios updateManyAndReturn
   */
  export type usuariosUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuariosWhereInput
    /**
     * Limit how many usuarios to update.
     */
    limit?: number
  }

  /**
   * usuarios upsert
   */
  export type usuariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The filter to search for the usuarios to update in case it exists.
     */
    where: usuariosWhereUniqueInput
    /**
     * In case the usuarios found by the `where` argument doesn't exist, create a new usuarios with this data.
     */
    create: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
    /**
     * In case the usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
  }

  /**
   * usuarios delete
   */
  export type usuariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter which usuarios to delete.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios deleteMany
   */
  export type usuariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuariosWhereInput
    /**
     * Limit how many usuarios to delete.
     */
    limit?: number
  }

  /**
   * usuarios without action
   */
  export type usuariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdocoesScalarFieldEnum: {
    id: 'id',
    pets_id: 'pets_id',
    adotantes_id: 'adotantes_id',
    data_adocao: 'data_adocao'
  };

  export type AdocoesScalarFieldEnum = (typeof AdocoesScalarFieldEnum)[keyof typeof AdocoesScalarFieldEnum]


  export const AdotantesScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    endereco: 'endereco'
  };

  export type AdotantesScalarFieldEnum = (typeof AdotantesScalarFieldEnum)[keyof typeof AdotantesScalarFieldEnum]


  export const PetsScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    especie: 'especie',
    nascimento: 'nascimento',
    descricao: 'descricao',
    estado: 'estado',
    tamanho: 'tamanho',
    personalidade: 'personalidade',
    avatar: 'avatar',
    fotos: 'fotos'
  };

  export type PetsScalarFieldEnum = (typeof PetsScalarFieldEnum)[keyof typeof PetsScalarFieldEnum]


  export const UsuariosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    telefone: 'telefone',
    email: 'email',
    senha: 'senha',
    usuarioadmin: 'usuarioadmin'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'estado'
   */
  export type EnumestadoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'estado'>
    


  /**
   * Reference to a field of type 'estado[]'
   */
  export type ListEnumestadoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'estado[]'>
    


  /**
   * Reference to a field of type 'tamanho'
   */
  export type EnumtamanhoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'tamanho'>
    


  /**
   * Reference to a field of type 'tamanho[]'
   */
  export type ListEnumtamanhoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'tamanho[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type adocoesWhereInput = {
    AND?: adocoesWhereInput | adocoesWhereInput[]
    OR?: adocoesWhereInput[]
    NOT?: adocoesWhereInput | adocoesWhereInput[]
    id?: IntFilter<"adocoes"> | number
    pets_id?: IntFilter<"adocoes"> | number
    adotantes_id?: IntFilter<"adocoes"> | number
    data_adocao?: DateTimeFilter<"adocoes"> | Date | string
    adotantes?: XOR<AdotantesScalarRelationFilter, adotantesWhereInput>
    pets?: XOR<PetsScalarRelationFilter, petsWhereInput>
  }

  export type adocoesOrderByWithRelationInput = {
    id?: SortOrder
    pets_id?: SortOrder
    adotantes_id?: SortOrder
    data_adocao?: SortOrder
    adotantes?: adotantesOrderByWithRelationInput
    pets?: petsOrderByWithRelationInput
  }

  export type adocoesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: adocoesWhereInput | adocoesWhereInput[]
    OR?: adocoesWhereInput[]
    NOT?: adocoesWhereInput | adocoesWhereInput[]
    pets_id?: IntFilter<"adocoes"> | number
    adotantes_id?: IntFilter<"adocoes"> | number
    data_adocao?: DateTimeFilter<"adocoes"> | Date | string
    adotantes?: XOR<AdotantesScalarRelationFilter, adotantesWhereInput>
    pets?: XOR<PetsScalarRelationFilter, petsWhereInput>
  }, "id">

  export type adocoesOrderByWithAggregationInput = {
    id?: SortOrder
    pets_id?: SortOrder
    adotantes_id?: SortOrder
    data_adocao?: SortOrder
    _count?: adocoesCountOrderByAggregateInput
    _avg?: adocoesAvgOrderByAggregateInput
    _max?: adocoesMaxOrderByAggregateInput
    _min?: adocoesMinOrderByAggregateInput
    _sum?: adocoesSumOrderByAggregateInput
  }

  export type adocoesScalarWhereWithAggregatesInput = {
    AND?: adocoesScalarWhereWithAggregatesInput | adocoesScalarWhereWithAggregatesInput[]
    OR?: adocoesScalarWhereWithAggregatesInput[]
    NOT?: adocoesScalarWhereWithAggregatesInput | adocoesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"adocoes"> | number
    pets_id?: IntWithAggregatesFilter<"adocoes"> | number
    adotantes_id?: IntWithAggregatesFilter<"adocoes"> | number
    data_adocao?: DateTimeWithAggregatesFilter<"adocoes"> | Date | string
  }

  export type adotantesWhereInput = {
    AND?: adotantesWhereInput | adotantesWhereInput[]
    OR?: adotantesWhereInput[]
    NOT?: adotantesWhereInput | adotantesWhereInput[]
    id?: IntFilter<"adotantes"> | number
    nome?: StringFilter<"adotantes"> | string
    email?: StringFilter<"adotantes"> | string
    telefone?: StringFilter<"adotantes"> | string
    endereco?: StringFilter<"adotantes"> | string
    adocoes?: AdocoesListRelationFilter
  }

  export type adotantesOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    endereco?: SortOrder
    adocoes?: adocoesOrderByRelationAggregateInput
  }

  export type adotantesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: adotantesWhereInput | adotantesWhereInput[]
    OR?: adotantesWhereInput[]
    NOT?: adotantesWhereInput | adotantesWhereInput[]
    nome?: StringFilter<"adotantes"> | string
    telefone?: StringFilter<"adotantes"> | string
    endereco?: StringFilter<"adotantes"> | string
    adocoes?: AdocoesListRelationFilter
  }, "id" | "email">

  export type adotantesOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    endereco?: SortOrder
    _count?: adotantesCountOrderByAggregateInput
    _avg?: adotantesAvgOrderByAggregateInput
    _max?: adotantesMaxOrderByAggregateInput
    _min?: adotantesMinOrderByAggregateInput
    _sum?: adotantesSumOrderByAggregateInput
  }

  export type adotantesScalarWhereWithAggregatesInput = {
    AND?: adotantesScalarWhereWithAggregatesInput | adotantesScalarWhereWithAggregatesInput[]
    OR?: adotantesScalarWhereWithAggregatesInput[]
    NOT?: adotantesScalarWhereWithAggregatesInput | adotantesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"adotantes"> | number
    nome?: StringWithAggregatesFilter<"adotantes"> | string
    email?: StringWithAggregatesFilter<"adotantes"> | string
    telefone?: StringWithAggregatesFilter<"adotantes"> | string
    endereco?: StringWithAggregatesFilter<"adotantes"> | string
  }

  export type petsWhereInput = {
    AND?: petsWhereInput | petsWhereInput[]
    OR?: petsWhereInput[]
    NOT?: petsWhereInput | petsWhereInput[]
    id?: IntFilter<"pets"> | number
    nome?: StringFilter<"pets"> | string
    especie?: StringFilter<"pets"> | string
    nascimento?: DateTimeFilter<"pets"> | Date | string
    descricao?: StringNullableFilter<"pets"> | string | null
    estado?: EnumestadoFilter<"pets"> | $Enums.estado
    tamanho?: EnumtamanhoNullableFilter<"pets"> | $Enums.tamanho | null
    personalidade?: StringNullableFilter<"pets"> | string | null
    avatar?: StringNullableFilter<"pets"> | string | null
    fotos?: StringNullableFilter<"pets"> | string | null
    adocoes?: AdocoesListRelationFilter
  }

  export type petsOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    especie?: SortOrder
    nascimento?: SortOrder
    descricao?: SortOrderInput | SortOrder
    estado?: SortOrder
    tamanho?: SortOrderInput | SortOrder
    personalidade?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    fotos?: SortOrderInput | SortOrder
    adocoes?: adocoesOrderByRelationAggregateInput
  }

  export type petsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: petsWhereInput | petsWhereInput[]
    OR?: petsWhereInput[]
    NOT?: petsWhereInput | petsWhereInput[]
    especie?: StringFilter<"pets"> | string
    nascimento?: DateTimeFilter<"pets"> | Date | string
    descricao?: StringNullableFilter<"pets"> | string | null
    estado?: EnumestadoFilter<"pets"> | $Enums.estado
    tamanho?: EnumtamanhoNullableFilter<"pets"> | $Enums.tamanho | null
    personalidade?: StringNullableFilter<"pets"> | string | null
    avatar?: StringNullableFilter<"pets"> | string | null
    fotos?: StringNullableFilter<"pets"> | string | null
    adocoes?: AdocoesListRelationFilter
  }, "id" | "nome">

  export type petsOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    especie?: SortOrder
    nascimento?: SortOrder
    descricao?: SortOrderInput | SortOrder
    estado?: SortOrder
    tamanho?: SortOrderInput | SortOrder
    personalidade?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    fotos?: SortOrderInput | SortOrder
    _count?: petsCountOrderByAggregateInput
    _avg?: petsAvgOrderByAggregateInput
    _max?: petsMaxOrderByAggregateInput
    _min?: petsMinOrderByAggregateInput
    _sum?: petsSumOrderByAggregateInput
  }

  export type petsScalarWhereWithAggregatesInput = {
    AND?: petsScalarWhereWithAggregatesInput | petsScalarWhereWithAggregatesInput[]
    OR?: petsScalarWhereWithAggregatesInput[]
    NOT?: petsScalarWhereWithAggregatesInput | petsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"pets"> | number
    nome?: StringWithAggregatesFilter<"pets"> | string
    especie?: StringWithAggregatesFilter<"pets"> | string
    nascimento?: DateTimeWithAggregatesFilter<"pets"> | Date | string
    descricao?: StringNullableWithAggregatesFilter<"pets"> | string | null
    estado?: EnumestadoWithAggregatesFilter<"pets"> | $Enums.estado
    tamanho?: EnumtamanhoNullableWithAggregatesFilter<"pets"> | $Enums.tamanho | null
    personalidade?: StringNullableWithAggregatesFilter<"pets"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"pets"> | string | null
    fotos?: StringNullableWithAggregatesFilter<"pets"> | string | null
  }

  export type usuariosWhereInput = {
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    id?: IntFilter<"usuarios"> | number
    nome?: StringFilter<"usuarios"> | string
    telefone?: StringFilter<"usuarios"> | string
    email?: StringFilter<"usuarios"> | string
    senha?: StringFilter<"usuarios"> | string
    usuarioadmin?: BoolNullableFilter<"usuarios"> | boolean | null
  }

  export type usuariosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    usuarioadmin?: SortOrderInput | SortOrder
  }

  export type usuariosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    nome?: StringFilter<"usuarios"> | string
    telefone?: StringFilter<"usuarios"> | string
    senha?: StringFilter<"usuarios"> | string
    usuarioadmin?: BoolNullableFilter<"usuarios"> | boolean | null
  }, "id" | "email">

  export type usuariosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    usuarioadmin?: SortOrderInput | SortOrder
    _count?: usuariosCountOrderByAggregateInput
    _avg?: usuariosAvgOrderByAggregateInput
    _max?: usuariosMaxOrderByAggregateInput
    _min?: usuariosMinOrderByAggregateInput
    _sum?: usuariosSumOrderByAggregateInput
  }

  export type usuariosScalarWhereWithAggregatesInput = {
    AND?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    OR?: usuariosScalarWhereWithAggregatesInput[]
    NOT?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"usuarios"> | number
    nome?: StringWithAggregatesFilter<"usuarios"> | string
    telefone?: StringWithAggregatesFilter<"usuarios"> | string
    email?: StringWithAggregatesFilter<"usuarios"> | string
    senha?: StringWithAggregatesFilter<"usuarios"> | string
    usuarioadmin?: BoolNullableWithAggregatesFilter<"usuarios"> | boolean | null
  }

  export type adocoesCreateInput = {
    data_adocao: Date | string
    adotantes: adotantesCreateNestedOneWithoutAdocoesInput
    pets: petsCreateNestedOneWithoutAdocoesInput
  }

  export type adocoesUncheckedCreateInput = {
    id?: number
    pets_id: number
    adotantes_id: number
    data_adocao: Date | string
  }

  export type adocoesUpdateInput = {
    data_adocao?: DateTimeFieldUpdateOperationsInput | Date | string
    adotantes?: adotantesUpdateOneRequiredWithoutAdocoesNestedInput
    pets?: petsUpdateOneRequiredWithoutAdocoesNestedInput
  }

  export type adocoesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pets_id?: IntFieldUpdateOperationsInput | number
    adotantes_id?: IntFieldUpdateOperationsInput | number
    data_adocao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type adocoesCreateManyInput = {
    id?: number
    pets_id: number
    adotantes_id: number
    data_adocao: Date | string
  }

  export type adocoesUpdateManyMutationInput = {
    data_adocao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type adocoesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pets_id?: IntFieldUpdateOperationsInput | number
    adotantes_id?: IntFieldUpdateOperationsInput | number
    data_adocao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type adotantesCreateInput = {
    nome: string
    email: string
    telefone: string
    endereco: string
    adocoes?: adocoesCreateNestedManyWithoutAdotantesInput
  }

  export type adotantesUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    endereco: string
    adocoes?: adocoesUncheckedCreateNestedManyWithoutAdotantesInput
  }

  export type adotantesUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    adocoes?: adocoesUpdateManyWithoutAdotantesNestedInput
  }

  export type adotantesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    adocoes?: adocoesUncheckedUpdateManyWithoutAdotantesNestedInput
  }

  export type adotantesCreateManyInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    endereco: string
  }

  export type adotantesUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type adotantesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type petsCreateInput = {
    nome: string
    especie: string
    nascimento: Date | string
    descricao?: string | null
    estado: $Enums.estado
    tamanho?: $Enums.tamanho | null
    personalidade?: string | null
    avatar?: string | null
    fotos?: string | null
    adocoes?: adocoesCreateNestedManyWithoutPetsInput
  }

  export type petsUncheckedCreateInput = {
    id?: number
    nome: string
    especie: string
    nascimento: Date | string
    descricao?: string | null
    estado: $Enums.estado
    tamanho?: $Enums.tamanho | null
    personalidade?: string | null
    avatar?: string | null
    fotos?: string | null
    adocoes?: adocoesUncheckedCreateNestedManyWithoutPetsInput
  }

  export type petsUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    especie?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumestadoFieldUpdateOperationsInput | $Enums.estado
    tamanho?: NullableEnumtamanhoFieldUpdateOperationsInput | $Enums.tamanho | null
    personalidade?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: NullableStringFieldUpdateOperationsInput | string | null
    adocoes?: adocoesUpdateManyWithoutPetsNestedInput
  }

  export type petsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    especie?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumestadoFieldUpdateOperationsInput | $Enums.estado
    tamanho?: NullableEnumtamanhoFieldUpdateOperationsInput | $Enums.tamanho | null
    personalidade?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: NullableStringFieldUpdateOperationsInput | string | null
    adocoes?: adocoesUncheckedUpdateManyWithoutPetsNestedInput
  }

  export type petsCreateManyInput = {
    id?: number
    nome: string
    especie: string
    nascimento: Date | string
    descricao?: string | null
    estado: $Enums.estado
    tamanho?: $Enums.tamanho | null
    personalidade?: string | null
    avatar?: string | null
    fotos?: string | null
  }

  export type petsUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    especie?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumestadoFieldUpdateOperationsInput | $Enums.estado
    tamanho?: NullableEnumtamanhoFieldUpdateOperationsInput | $Enums.tamanho | null
    personalidade?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type petsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    especie?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumestadoFieldUpdateOperationsInput | $Enums.estado
    tamanho?: NullableEnumtamanhoFieldUpdateOperationsInput | $Enums.tamanho | null
    personalidade?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usuariosCreateInput = {
    nome: string
    telefone: string
    email: string
    senha: string
    usuarioadmin?: boolean | null
  }

  export type usuariosUncheckedCreateInput = {
    id?: number
    nome: string
    telefone: string
    email: string
    senha: string
    usuarioadmin?: boolean | null
  }

  export type usuariosUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    usuarioadmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type usuariosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    usuarioadmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type usuariosCreateManyInput = {
    id?: number
    nome: string
    telefone: string
    email: string
    senha: string
    usuarioadmin?: boolean | null
  }

  export type usuariosUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    usuarioadmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type usuariosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    usuarioadmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AdotantesScalarRelationFilter = {
    is?: adotantesWhereInput
    isNot?: adotantesWhereInput
  }

  export type PetsScalarRelationFilter = {
    is?: petsWhereInput
    isNot?: petsWhereInput
  }

  export type adocoesCountOrderByAggregateInput = {
    id?: SortOrder
    pets_id?: SortOrder
    adotantes_id?: SortOrder
    data_adocao?: SortOrder
  }

  export type adocoesAvgOrderByAggregateInput = {
    id?: SortOrder
    pets_id?: SortOrder
    adotantes_id?: SortOrder
  }

  export type adocoesMaxOrderByAggregateInput = {
    id?: SortOrder
    pets_id?: SortOrder
    adotantes_id?: SortOrder
    data_adocao?: SortOrder
  }

  export type adocoesMinOrderByAggregateInput = {
    id?: SortOrder
    pets_id?: SortOrder
    adotantes_id?: SortOrder
    data_adocao?: SortOrder
  }

  export type adocoesSumOrderByAggregateInput = {
    id?: SortOrder
    pets_id?: SortOrder
    adotantes_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type AdocoesListRelationFilter = {
    every?: adocoesWhereInput
    some?: adocoesWhereInput
    none?: adocoesWhereInput
  }

  export type adocoesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type adotantesCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    endereco?: SortOrder
  }

  export type adotantesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type adotantesMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    endereco?: SortOrder
  }

  export type adotantesMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    endereco?: SortOrder
  }

  export type adotantesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumestadoFilter<$PrismaModel = never> = {
    equals?: $Enums.estado | EnumestadoFieldRefInput<$PrismaModel>
    in?: $Enums.estado[] | ListEnumestadoFieldRefInput<$PrismaModel>
    notIn?: $Enums.estado[] | ListEnumestadoFieldRefInput<$PrismaModel>
    not?: NestedEnumestadoFilter<$PrismaModel> | $Enums.estado
  }

  export type EnumtamanhoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.tamanho | EnumtamanhoFieldRefInput<$PrismaModel> | null
    in?: $Enums.tamanho[] | ListEnumtamanhoFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.tamanho[] | ListEnumtamanhoFieldRefInput<$PrismaModel> | null
    not?: NestedEnumtamanhoNullableFilter<$PrismaModel> | $Enums.tamanho | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type petsCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    especie?: SortOrder
    nascimento?: SortOrder
    descricao?: SortOrder
    estado?: SortOrder
    tamanho?: SortOrder
    personalidade?: SortOrder
    avatar?: SortOrder
    fotos?: SortOrder
  }

  export type petsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type petsMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    especie?: SortOrder
    nascimento?: SortOrder
    descricao?: SortOrder
    estado?: SortOrder
    tamanho?: SortOrder
    personalidade?: SortOrder
    avatar?: SortOrder
    fotos?: SortOrder
  }

  export type petsMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    especie?: SortOrder
    nascimento?: SortOrder
    descricao?: SortOrder
    estado?: SortOrder
    tamanho?: SortOrder
    personalidade?: SortOrder
    avatar?: SortOrder
    fotos?: SortOrder
  }

  export type petsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumestadoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.estado | EnumestadoFieldRefInput<$PrismaModel>
    in?: $Enums.estado[] | ListEnumestadoFieldRefInput<$PrismaModel>
    notIn?: $Enums.estado[] | ListEnumestadoFieldRefInput<$PrismaModel>
    not?: NestedEnumestadoWithAggregatesFilter<$PrismaModel> | $Enums.estado
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumestadoFilter<$PrismaModel>
    _max?: NestedEnumestadoFilter<$PrismaModel>
  }

  export type EnumtamanhoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.tamanho | EnumtamanhoFieldRefInput<$PrismaModel> | null
    in?: $Enums.tamanho[] | ListEnumtamanhoFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.tamanho[] | ListEnumtamanhoFieldRefInput<$PrismaModel> | null
    not?: NestedEnumtamanhoNullableWithAggregatesFilter<$PrismaModel> | $Enums.tamanho | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtamanhoNullableFilter<$PrismaModel>
    _max?: NestedEnumtamanhoNullableFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type usuariosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    usuarioadmin?: SortOrder
  }

  export type usuariosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usuariosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    usuarioadmin?: SortOrder
  }

  export type usuariosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    usuarioadmin?: SortOrder
  }

  export type usuariosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type adotantesCreateNestedOneWithoutAdocoesInput = {
    create?: XOR<adotantesCreateWithoutAdocoesInput, adotantesUncheckedCreateWithoutAdocoesInput>
    connectOrCreate?: adotantesCreateOrConnectWithoutAdocoesInput
    connect?: adotantesWhereUniqueInput
  }

  export type petsCreateNestedOneWithoutAdocoesInput = {
    create?: XOR<petsCreateWithoutAdocoesInput, petsUncheckedCreateWithoutAdocoesInput>
    connectOrCreate?: petsCreateOrConnectWithoutAdocoesInput
    connect?: petsWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type adotantesUpdateOneRequiredWithoutAdocoesNestedInput = {
    create?: XOR<adotantesCreateWithoutAdocoesInput, adotantesUncheckedCreateWithoutAdocoesInput>
    connectOrCreate?: adotantesCreateOrConnectWithoutAdocoesInput
    upsert?: adotantesUpsertWithoutAdocoesInput
    connect?: adotantesWhereUniqueInput
    update?: XOR<XOR<adotantesUpdateToOneWithWhereWithoutAdocoesInput, adotantesUpdateWithoutAdocoesInput>, adotantesUncheckedUpdateWithoutAdocoesInput>
  }

  export type petsUpdateOneRequiredWithoutAdocoesNestedInput = {
    create?: XOR<petsCreateWithoutAdocoesInput, petsUncheckedCreateWithoutAdocoesInput>
    connectOrCreate?: petsCreateOrConnectWithoutAdocoesInput
    upsert?: petsUpsertWithoutAdocoesInput
    connect?: petsWhereUniqueInput
    update?: XOR<XOR<petsUpdateToOneWithWhereWithoutAdocoesInput, petsUpdateWithoutAdocoesInput>, petsUncheckedUpdateWithoutAdocoesInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type adocoesCreateNestedManyWithoutAdotantesInput = {
    create?: XOR<adocoesCreateWithoutAdotantesInput, adocoesUncheckedCreateWithoutAdotantesInput> | adocoesCreateWithoutAdotantesInput[] | adocoesUncheckedCreateWithoutAdotantesInput[]
    connectOrCreate?: adocoesCreateOrConnectWithoutAdotantesInput | adocoesCreateOrConnectWithoutAdotantesInput[]
    createMany?: adocoesCreateManyAdotantesInputEnvelope
    connect?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
  }

  export type adocoesUncheckedCreateNestedManyWithoutAdotantesInput = {
    create?: XOR<adocoesCreateWithoutAdotantesInput, adocoesUncheckedCreateWithoutAdotantesInput> | adocoesCreateWithoutAdotantesInput[] | adocoesUncheckedCreateWithoutAdotantesInput[]
    connectOrCreate?: adocoesCreateOrConnectWithoutAdotantesInput | adocoesCreateOrConnectWithoutAdotantesInput[]
    createMany?: adocoesCreateManyAdotantesInputEnvelope
    connect?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type adocoesUpdateManyWithoutAdotantesNestedInput = {
    create?: XOR<adocoesCreateWithoutAdotantesInput, adocoesUncheckedCreateWithoutAdotantesInput> | adocoesCreateWithoutAdotantesInput[] | adocoesUncheckedCreateWithoutAdotantesInput[]
    connectOrCreate?: adocoesCreateOrConnectWithoutAdotantesInput | adocoesCreateOrConnectWithoutAdotantesInput[]
    upsert?: adocoesUpsertWithWhereUniqueWithoutAdotantesInput | adocoesUpsertWithWhereUniqueWithoutAdotantesInput[]
    createMany?: adocoesCreateManyAdotantesInputEnvelope
    set?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    disconnect?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    delete?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    connect?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    update?: adocoesUpdateWithWhereUniqueWithoutAdotantesInput | adocoesUpdateWithWhereUniqueWithoutAdotantesInput[]
    updateMany?: adocoesUpdateManyWithWhereWithoutAdotantesInput | adocoesUpdateManyWithWhereWithoutAdotantesInput[]
    deleteMany?: adocoesScalarWhereInput | adocoesScalarWhereInput[]
  }

  export type adocoesUncheckedUpdateManyWithoutAdotantesNestedInput = {
    create?: XOR<adocoesCreateWithoutAdotantesInput, adocoesUncheckedCreateWithoutAdotantesInput> | adocoesCreateWithoutAdotantesInput[] | adocoesUncheckedCreateWithoutAdotantesInput[]
    connectOrCreate?: adocoesCreateOrConnectWithoutAdotantesInput | adocoesCreateOrConnectWithoutAdotantesInput[]
    upsert?: adocoesUpsertWithWhereUniqueWithoutAdotantesInput | adocoesUpsertWithWhereUniqueWithoutAdotantesInput[]
    createMany?: adocoesCreateManyAdotantesInputEnvelope
    set?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    disconnect?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    delete?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    connect?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    update?: adocoesUpdateWithWhereUniqueWithoutAdotantesInput | adocoesUpdateWithWhereUniqueWithoutAdotantesInput[]
    updateMany?: adocoesUpdateManyWithWhereWithoutAdotantesInput | adocoesUpdateManyWithWhereWithoutAdotantesInput[]
    deleteMany?: adocoesScalarWhereInput | adocoesScalarWhereInput[]
  }

  export type adocoesCreateNestedManyWithoutPetsInput = {
    create?: XOR<adocoesCreateWithoutPetsInput, adocoesUncheckedCreateWithoutPetsInput> | adocoesCreateWithoutPetsInput[] | adocoesUncheckedCreateWithoutPetsInput[]
    connectOrCreate?: adocoesCreateOrConnectWithoutPetsInput | adocoesCreateOrConnectWithoutPetsInput[]
    createMany?: adocoesCreateManyPetsInputEnvelope
    connect?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
  }

  export type adocoesUncheckedCreateNestedManyWithoutPetsInput = {
    create?: XOR<adocoesCreateWithoutPetsInput, adocoesUncheckedCreateWithoutPetsInput> | adocoesCreateWithoutPetsInput[] | adocoesUncheckedCreateWithoutPetsInput[]
    connectOrCreate?: adocoesCreateOrConnectWithoutPetsInput | adocoesCreateOrConnectWithoutPetsInput[]
    createMany?: adocoesCreateManyPetsInputEnvelope
    connect?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumestadoFieldUpdateOperationsInput = {
    set?: $Enums.estado
  }

  export type NullableEnumtamanhoFieldUpdateOperationsInput = {
    set?: $Enums.tamanho | null
  }

  export type adocoesUpdateManyWithoutPetsNestedInput = {
    create?: XOR<adocoesCreateWithoutPetsInput, adocoesUncheckedCreateWithoutPetsInput> | adocoesCreateWithoutPetsInput[] | adocoesUncheckedCreateWithoutPetsInput[]
    connectOrCreate?: adocoesCreateOrConnectWithoutPetsInput | adocoesCreateOrConnectWithoutPetsInput[]
    upsert?: adocoesUpsertWithWhereUniqueWithoutPetsInput | adocoesUpsertWithWhereUniqueWithoutPetsInput[]
    createMany?: adocoesCreateManyPetsInputEnvelope
    set?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    disconnect?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    delete?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    connect?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    update?: adocoesUpdateWithWhereUniqueWithoutPetsInput | adocoesUpdateWithWhereUniqueWithoutPetsInput[]
    updateMany?: adocoesUpdateManyWithWhereWithoutPetsInput | adocoesUpdateManyWithWhereWithoutPetsInput[]
    deleteMany?: adocoesScalarWhereInput | adocoesScalarWhereInput[]
  }

  export type adocoesUncheckedUpdateManyWithoutPetsNestedInput = {
    create?: XOR<adocoesCreateWithoutPetsInput, adocoesUncheckedCreateWithoutPetsInput> | adocoesCreateWithoutPetsInput[] | adocoesUncheckedCreateWithoutPetsInput[]
    connectOrCreate?: adocoesCreateOrConnectWithoutPetsInput | adocoesCreateOrConnectWithoutPetsInput[]
    upsert?: adocoesUpsertWithWhereUniqueWithoutPetsInput | adocoesUpsertWithWhereUniqueWithoutPetsInput[]
    createMany?: adocoesCreateManyPetsInputEnvelope
    set?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    disconnect?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    delete?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    connect?: adocoesWhereUniqueInput | adocoesWhereUniqueInput[]
    update?: adocoesUpdateWithWhereUniqueWithoutPetsInput | adocoesUpdateWithWhereUniqueWithoutPetsInput[]
    updateMany?: adocoesUpdateManyWithWhereWithoutPetsInput | adocoesUpdateManyWithWhereWithoutPetsInput[]
    deleteMany?: adocoesScalarWhereInput | adocoesScalarWhereInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumestadoFilter<$PrismaModel = never> = {
    equals?: $Enums.estado | EnumestadoFieldRefInput<$PrismaModel>
    in?: $Enums.estado[] | ListEnumestadoFieldRefInput<$PrismaModel>
    notIn?: $Enums.estado[] | ListEnumestadoFieldRefInput<$PrismaModel>
    not?: NestedEnumestadoFilter<$PrismaModel> | $Enums.estado
  }

  export type NestedEnumtamanhoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.tamanho | EnumtamanhoFieldRefInput<$PrismaModel> | null
    in?: $Enums.tamanho[] | ListEnumtamanhoFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.tamanho[] | ListEnumtamanhoFieldRefInput<$PrismaModel> | null
    not?: NestedEnumtamanhoNullableFilter<$PrismaModel> | $Enums.tamanho | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumestadoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.estado | EnumestadoFieldRefInput<$PrismaModel>
    in?: $Enums.estado[] | ListEnumestadoFieldRefInput<$PrismaModel>
    notIn?: $Enums.estado[] | ListEnumestadoFieldRefInput<$PrismaModel>
    not?: NestedEnumestadoWithAggregatesFilter<$PrismaModel> | $Enums.estado
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumestadoFilter<$PrismaModel>
    _max?: NestedEnumestadoFilter<$PrismaModel>
  }

  export type NestedEnumtamanhoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.tamanho | EnumtamanhoFieldRefInput<$PrismaModel> | null
    in?: $Enums.tamanho[] | ListEnumtamanhoFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.tamanho[] | ListEnumtamanhoFieldRefInput<$PrismaModel> | null
    not?: NestedEnumtamanhoNullableWithAggregatesFilter<$PrismaModel> | $Enums.tamanho | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtamanhoNullableFilter<$PrismaModel>
    _max?: NestedEnumtamanhoNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type adotantesCreateWithoutAdocoesInput = {
    nome: string
    email: string
    telefone: string
    endereco: string
  }

  export type adotantesUncheckedCreateWithoutAdocoesInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    endereco: string
  }

  export type adotantesCreateOrConnectWithoutAdocoesInput = {
    where: adotantesWhereUniqueInput
    create: XOR<adotantesCreateWithoutAdocoesInput, adotantesUncheckedCreateWithoutAdocoesInput>
  }

  export type petsCreateWithoutAdocoesInput = {
    nome: string
    especie: string
    nascimento: Date | string
    descricao?: string | null
    estado: $Enums.estado
    tamanho?: $Enums.tamanho | null
    personalidade?: string | null
    avatar?: string | null
    fotos?: string | null
  }

  export type petsUncheckedCreateWithoutAdocoesInput = {
    id?: number
    nome: string
    especie: string
    nascimento: Date | string
    descricao?: string | null
    estado: $Enums.estado
    tamanho?: $Enums.tamanho | null
    personalidade?: string | null
    avatar?: string | null
    fotos?: string | null
  }

  export type petsCreateOrConnectWithoutAdocoesInput = {
    where: petsWhereUniqueInput
    create: XOR<petsCreateWithoutAdocoesInput, petsUncheckedCreateWithoutAdocoesInput>
  }

  export type adotantesUpsertWithoutAdocoesInput = {
    update: XOR<adotantesUpdateWithoutAdocoesInput, adotantesUncheckedUpdateWithoutAdocoesInput>
    create: XOR<adotantesCreateWithoutAdocoesInput, adotantesUncheckedCreateWithoutAdocoesInput>
    where?: adotantesWhereInput
  }

  export type adotantesUpdateToOneWithWhereWithoutAdocoesInput = {
    where?: adotantesWhereInput
    data: XOR<adotantesUpdateWithoutAdocoesInput, adotantesUncheckedUpdateWithoutAdocoesInput>
  }

  export type adotantesUpdateWithoutAdocoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type adotantesUncheckedUpdateWithoutAdocoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type petsUpsertWithoutAdocoesInput = {
    update: XOR<petsUpdateWithoutAdocoesInput, petsUncheckedUpdateWithoutAdocoesInput>
    create: XOR<petsCreateWithoutAdocoesInput, petsUncheckedCreateWithoutAdocoesInput>
    where?: petsWhereInput
  }

  export type petsUpdateToOneWithWhereWithoutAdocoesInput = {
    where?: petsWhereInput
    data: XOR<petsUpdateWithoutAdocoesInput, petsUncheckedUpdateWithoutAdocoesInput>
  }

  export type petsUpdateWithoutAdocoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    especie?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumestadoFieldUpdateOperationsInput | $Enums.estado
    tamanho?: NullableEnumtamanhoFieldUpdateOperationsInput | $Enums.tamanho | null
    personalidade?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type petsUncheckedUpdateWithoutAdocoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    especie?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumestadoFieldUpdateOperationsInput | $Enums.estado
    tamanho?: NullableEnumtamanhoFieldUpdateOperationsInput | $Enums.tamanho | null
    personalidade?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type adocoesCreateWithoutAdotantesInput = {
    data_adocao: Date | string
    pets: petsCreateNestedOneWithoutAdocoesInput
  }

  export type adocoesUncheckedCreateWithoutAdotantesInput = {
    id?: number
    pets_id: number
    data_adocao: Date | string
  }

  export type adocoesCreateOrConnectWithoutAdotantesInput = {
    where: adocoesWhereUniqueInput
    create: XOR<adocoesCreateWithoutAdotantesInput, adocoesUncheckedCreateWithoutAdotantesInput>
  }

  export type adocoesCreateManyAdotantesInputEnvelope = {
    data: adocoesCreateManyAdotantesInput | adocoesCreateManyAdotantesInput[]
    skipDuplicates?: boolean
  }

  export type adocoesUpsertWithWhereUniqueWithoutAdotantesInput = {
    where: adocoesWhereUniqueInput
    update: XOR<adocoesUpdateWithoutAdotantesInput, adocoesUncheckedUpdateWithoutAdotantesInput>
    create: XOR<adocoesCreateWithoutAdotantesInput, adocoesUncheckedCreateWithoutAdotantesInput>
  }

  export type adocoesUpdateWithWhereUniqueWithoutAdotantesInput = {
    where: adocoesWhereUniqueInput
    data: XOR<adocoesUpdateWithoutAdotantesInput, adocoesUncheckedUpdateWithoutAdotantesInput>
  }

  export type adocoesUpdateManyWithWhereWithoutAdotantesInput = {
    where: adocoesScalarWhereInput
    data: XOR<adocoesUpdateManyMutationInput, adocoesUncheckedUpdateManyWithoutAdotantesInput>
  }

  export type adocoesScalarWhereInput = {
    AND?: adocoesScalarWhereInput | adocoesScalarWhereInput[]
    OR?: adocoesScalarWhereInput[]
    NOT?: adocoesScalarWhereInput | adocoesScalarWhereInput[]
    id?: IntFilter<"adocoes"> | number
    pets_id?: IntFilter<"adocoes"> | number
    adotantes_id?: IntFilter<"adocoes"> | number
    data_adocao?: DateTimeFilter<"adocoes"> | Date | string
  }

  export type adocoesCreateWithoutPetsInput = {
    data_adocao: Date | string
    adotantes: adotantesCreateNestedOneWithoutAdocoesInput
  }

  export type adocoesUncheckedCreateWithoutPetsInput = {
    id?: number
    adotantes_id: number
    data_adocao: Date | string
  }

  export type adocoesCreateOrConnectWithoutPetsInput = {
    where: adocoesWhereUniqueInput
    create: XOR<adocoesCreateWithoutPetsInput, adocoesUncheckedCreateWithoutPetsInput>
  }

  export type adocoesCreateManyPetsInputEnvelope = {
    data: adocoesCreateManyPetsInput | adocoesCreateManyPetsInput[]
    skipDuplicates?: boolean
  }

  export type adocoesUpsertWithWhereUniqueWithoutPetsInput = {
    where: adocoesWhereUniqueInput
    update: XOR<adocoesUpdateWithoutPetsInput, adocoesUncheckedUpdateWithoutPetsInput>
    create: XOR<adocoesCreateWithoutPetsInput, adocoesUncheckedCreateWithoutPetsInput>
  }

  export type adocoesUpdateWithWhereUniqueWithoutPetsInput = {
    where: adocoesWhereUniqueInput
    data: XOR<adocoesUpdateWithoutPetsInput, adocoesUncheckedUpdateWithoutPetsInput>
  }

  export type adocoesUpdateManyWithWhereWithoutPetsInput = {
    where: adocoesScalarWhereInput
    data: XOR<adocoesUpdateManyMutationInput, adocoesUncheckedUpdateManyWithoutPetsInput>
  }

  export type adocoesCreateManyAdotantesInput = {
    id?: number
    pets_id: number
    data_adocao: Date | string
  }

  export type adocoesUpdateWithoutAdotantesInput = {
    data_adocao?: DateTimeFieldUpdateOperationsInput | Date | string
    pets?: petsUpdateOneRequiredWithoutAdocoesNestedInput
  }

  export type adocoesUncheckedUpdateWithoutAdotantesInput = {
    id?: IntFieldUpdateOperationsInput | number
    pets_id?: IntFieldUpdateOperationsInput | number
    data_adocao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type adocoesUncheckedUpdateManyWithoutAdotantesInput = {
    id?: IntFieldUpdateOperationsInput | number
    pets_id?: IntFieldUpdateOperationsInput | number
    data_adocao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type adocoesCreateManyPetsInput = {
    id?: number
    adotantes_id: number
    data_adocao: Date | string
  }

  export type adocoesUpdateWithoutPetsInput = {
    data_adocao?: DateTimeFieldUpdateOperationsInput | Date | string
    adotantes?: adotantesUpdateOneRequiredWithoutAdocoesNestedInput
  }

  export type adocoesUncheckedUpdateWithoutPetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    adotantes_id?: IntFieldUpdateOperationsInput | number
    data_adocao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type adocoesUncheckedUpdateManyWithoutPetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    adotantes_id?: IntFieldUpdateOperationsInput | number
    data_adocao?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}